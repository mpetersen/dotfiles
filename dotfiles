#!/bin/bash
# .dotfiles installation script for Mac OS X

base_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

function cmd_help {
    bold=$(tput bold)
    normal=$(tput sgr0)

    cat << EOF
dotfiles organizes your Mac OS X dotfiles

usage: dotfiles [<flag>] <command>

Available flags are:
  --filevault   Enables FileVault when used in combination with the setup
                command (${bold}experimental!${normal})

Available commands are:
  help          Prints this help text
  setup         Sets up dotfiles and the environment on the current system.
                This should be usually called only once
  update        Updates the dotfiles and the environment setup
  unlink        Unlinks the dotfiles so you can safely remove the .dotfiles
                repository


Copyright 2015 by Moritz Petersen


EOF
}

function cmd_setup {
    # Enable FileVault - WARNING: experimental!
    if ( $enable_filevault ); then
        sudo fdesetup enable -verbose -user `whoami`
        read -p "Press [Enter] to continue..."
    fi

    # Install developer tools
    xcode-select --install &> /dev/null

    # Install Homebrew
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    # Install Homebrew Cask
    brew install caskroom/cask/brew-cask

    # Install Homebrew Versions
    brew tap homebrew/versions

    # Install Homebrew Fonts
    brew tap caskroom/fonts

    # Call update function
    cmd_update
}

function cmd_update {
    # Install
    local installers=( brew brew-cask brew-fonts atom safari node dock )

    for installer in "${installers[@]}"; do
        $base_dir/install/$installer
    done

    # Link dotfiles
    for dotfile in $( $base_dir/repo ); do
        ln -s ~/.$dotfile $base_dir/repo/$dotfile
    done

    source ~/.bash_profile
}

function cmd_unlink {
    echo ">> ${FUNCNAME[0]}"
}

# Available flags; passed as arguments with '--' prefix, e.g. --filevault
# Will be mapped to variables with the prefix 'enable_', e.g.
# enable_filevault
flags=( filevault )

# Available commands; corresponding command function is prefixed with
# 'cmd_', e.g. cmd_help
commands=( help setup update unlink )

# Default command is 'help'
command=help
for arg in $@; do
    for f in "${flags[@]}"; do
        if [ "$arg" = "--$f" ]; then
            declare enable_$f=true
        fi
    done
    for c in "${commands[@]}"; do
        if [ "$arg" = "$c" ]; then
            command=$c
        fi
    done
done

# Extend sudo timeout when not help command
if [ $command != "help" ]; then
    sudo -v
fi

# Call command function
cmd_$command
